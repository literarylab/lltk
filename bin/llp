#!/usr/bin/env python

import os,sys,argparse,multiprocessing as mp
SLINGSHOT_N=mp.cpu_count()

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('cmd',help="Command for corpus (its method name)")
	parser.add_argument('corpus',help="Corpus name")
	parser.add_argument('-slingshot',action='store_true',default=False)
	parser.add_argument('-parallel',help='How many parallel processes to run on, using Slingshot?',default=SLINGSHOT_N)
	parser.add_argument('-sbatch',help='Run on sherlock?',action='store_true')
	parser.add_argument('-slingshot_opts',help='Other options to pass to slingshot',default='-progress')
	parser.add_argument('-savedir',help='Directory to save to (if applicable)',default='')
	parser.add_argument('-hours',help='Number of hours to run on Sherlock',default=2)
	args = parser.parse_args()

	if args.sbatch and not '-sbatch' in args.slingshot_opts: args.slingshot_opts+=' -sbatch'



	if args.cmd=='download' and args.corpus:
		import llp
		corpus = llp.load(args.corpus)
		corpus.download()

	if args.cmd=='zip' and args.corpus:
		import llp
		corpus = llp.load(args.corpus)
		ofolder = args.savedir
		sbatch_opts = llp.config['SBATCH_OPTS']+' -t {mins}'.format(mins=60*int(args.hours))
		corpus.zip(savedir=ofolder,sbatch=args.sbatch, sbatch_opts=sbatch_opts)

	elif args.cmd=='list':
		import llp
		manifest=llp.corpus.load_manifest()
		corpus_names=sorted(list(set(manifest.keys())))
		for cname in corpus_names:
			print('>>',cname,'\n'+manifest.get(cname,{}).get('desc','').strip()+'\n')

	elif args.cmd=='newcorpus':
		from llp.corpus import start_new_corpus_interactive
		start_new_corpus_interactive()

	elif args.corpus:
		import llp

		#xargs=list(args[3:])
		xargs=[]
		kwargs={}

		if args.slingshot:
			kwargs['slingshot']=args.slingshot
			kwargs['slingshot_n']=args.parallel
			kwargs['slingshot_opts']=args.slingshot_opts

		C=llp.load(args.corpus)
		f=getattr(C,args.cmd)
		f(*xargs,**kwargs)
